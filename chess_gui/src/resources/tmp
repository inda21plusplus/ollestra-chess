use chess;
use ggez;
use ggez::event::{self, EventHandler};
use ggez::graphics;
use ggez::graphics::{Image, Mesh};
use ggez::{Context, ContextBuilder, GameResult};
//use glam::*;

fn main() -> GameResult<()> {
    let (mut context, event_loop) = ContextBuilder::new("chess", "Daniel Tottie")
        .resources_dir_name("../../chess_gui/src/resources")
        .build()
        .expect("error");

    let chess_game = ChessGame::new(&mut context);

    event::run(context, event_loop, chess_game)
}

struct ChessGame {
    game: chess::game::Game,
    graphics_board: [[graphics::Color; 8]; 8],
    graphics_pieces: [[String; 8]; 8],
}

impl ChessGame {
    pub fn new(context: &mut Context) -> ChessGame {
        let mut game = chess::game::Game::new("player1".to_string(), "player2".to_string());
        let mut graphics_board = [[graphics::Color::WHITE; 8]; 8];
        for i in 0..8 {
            for j in 0..8 {
                if (i % 2 == 0 && j % 2 == 0) || (i % 2 != 0 && j % 2 != 0) {
                    graphics_board[i][j] = graphics::Color::WHITE;
                } else {
                    graphics_board[i][j] = graphics::Color::BLACK;
                }
            }
        }
        let mut graphics_pieces: [[String; 8]; 8] = Default::default();
        let mut graphics_pieces_str: [[&str; 8]; 8] = [
            ["rd", "nd", "bd", "qd", "kd", "bd", "nd", "rd"],
            ["pd", "pd", "pd", "pd", "pd", "pd", "pd", "pd"],
            [
                "None", "None", "None", "None", "None", "None", "None", "None",
            ],
            [
                "None", "None", "None", "None", "None", "None", "None", "None",
            ],
            [
                "None", "None", "None", "None", "None", "None", "None", "None",
            ],
            [
                "None", "None", "None", "None", "None", "None", "None", "None",
            ],
            ["pl", "pl", "pl", "pl", "pl", "pl", "pl", "pl"],
            ["rl", "nl", "bl", "ql", "kl", "bl", "nl", "rl"],
        ];
        for i in 0..8 {
            for j in 0..8 {
                graphics_pieces[i][j] = graphics_pieces_str[i][j].to_owned();
            }
        }
        ChessGame {
            game,
            graphics_board,
            graphics_pieces,
        }
    }
}

impl EventHandler<ggez::GameError> for ChessGame {
    fn update(&mut self, _ctx: &mut Context) -> GameResult<()> {
        // Update code here...
        Ok(())
    }

    fn draw(&mut self, ctx: &mut Context) -> GameResult<()> {
        let width = 100f32;
        let window = graphics::Rect::new(0f32, 0f32, 1000f32, 1000f32);
        graphics::clear(ctx, graphics::Color::from_rgb(100, 0, 100));
        graphics::set_window_title(ctx, "Daniel's Chess");
        //graphics::set_fullscreen(ctx, ggez::conf::FullscreenType::Desktop);

        graphics::set_fullscreen(ctx, ggez::conf::FullscreenType::True);
        graphics::set_fullscreen(ctx, ggez::conf::FullscreenType::True);
        graphics::set_screen_coordinates(ctx, window);

        // Draw code here...
        for i in 0..8 {
            for j in 0..8 {
                let square = graphics::Rect::new(
                    (i + 1) as f32 * 100.0,
                    (j + 1) as f32 * 100.0,
                    100.0,
                    100.0,
                );
                let square: graphics::Mesh = graphics::Mesh::new_rectangle(
                    ctx,
                    graphics::DrawMode::fill(),
                    square,
                    self.graphics_board[i][j],
                )?;
                graphics::draw(ctx, &square, graphics::DrawParam::default());
            }
        }
        for i in 0..8 {
            for j in 0..8 {
                let name = self.graphics_pieces[i][j].clone();
                if name != "None" {
                    let piece_image = graphics::Image::new(ctx, name);
                    let x = 50f32 * j as f32;
                    let y = 50f32 * i as f32;
                    let params = graphics::DrawParam::new().dest([x, y]).scale([1.5, 1.5]);

                    graphics::draw(ctx, &piece_image, params)?;
                }
            }
        }

        // let testpiece = graphics::Image::new(ctx, "bd.png") as Option<graphics::ImageGeneric>;
        //
        // let indices = &[1];
        // let piecemesh = graphics::Mesh::from_raw(ctx, &[], indices, testpiece)?;
        // graphics::draw(ctx, &piecemesh, graphics::DrawParam::default());

        graphics::present(ctx)
    }
}
